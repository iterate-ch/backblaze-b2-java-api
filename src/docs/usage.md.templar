# Usage{\n}
{\n}
```{\n}
// required imports{\n}
import synapticloop.b2.B2ApiClient;{\n}
import synapticloop.b2.exception.B2ApiException;{\n}
import synapticloop.b2.request.*;{\n}
import synapticloop.b2.response.*;{\n}
{\n}
{\n}
String b2AccountId = ""; // your b2 account ID{\n}
String b2ApplicationKey = ""; // your b2 application Key{\n}
{\n}
B2ApiClient b2ApiClient = new B2ApiClient();{\n}
b2ApiClient.authorize(b2AccountId, b2ApplicationKey);{\n}
{\n}
// now create a private bucket{\n}
B2BucketResponse createPrivateBucket = b2ApiClient.createBucket("super-secret-bucket" , BucketType.ALL_PRIVATE);{\n}
{\n}
// or a public one{\n}
B2BucketResponse createPublicBucket = b2ApiClient.createBucket("everyone-has-access" , BucketType.ALL_PUBLIC);{\n}
{\n}
// upload a file{\n}
b2ApiClient.uploadFile(createPrivateBucket.getBucketId(), "myfile.txt", new File("/tmp/temporary-file.txt"));{\n}
```{\n}
{\n}
see [B2ApiClient.java](https://github.com/synapticloop/backblaze-b2-java-api/blob/master/src/main/java/synapticloop/b2/B2ApiClient.java) for a complete list of relatively self-explanatory methods.{\n}
{\n}
```{\n}
// create a new B2ApiClient{\n}
B2ApiClient(){\n}
{\n}
// authorize the client{\n}
authorize(String, String){\n}
{\n}
// create a bucket{\n}
createBucket(String, BucketType){\n}
{\n}
// delete bucket{\n}
deleteBucket(String){\n}
{\n}
// delete bucket and all containing files{\n}
deleteBucketFully(String){\n}
{\n}
// delete a version of a file{\n}
deleteFileVersion(String, String){\n}
{\n}
// download the full file by id, returning a variety of objects{\n}
downloadFileById(String){\n}
downloadFileByIdToBytes(String){\n}
downloadFileByIdToFile(String, File){\n}
downloadFileByIdToStream(String){\n}
{\n}
// download the full file by name, returning a variety of objects{\n}
downloadFileByName(String, String){\n}
downloadFileByNameToBytes(String, String){\n}
downloadFileByNameToFile(String, String, File){\n}
downloadFileByNameToStream(String, String){\n}
{\n}
// download partial content of a file by id, returning a variety of objects{\n}
downloadFileRangeById(String, long, long){\n}
downloadFileRangeByIdToBytes(String, long, long){\n}
downloadFileRangeByIdToFile(String, File, long, long){\n}
downloadFileRangeByIdToStream(String, long, long){\n}
{\n}
// download partial content of a file by name, returning a variety of objects{\n}
downloadFileRangeByName(String, String, long, long){\n}
downloadFileRangeByNameToBytes(String, String, long, long){\n}
downloadFileRangeByNameToFile(String, String, File, long, long){\n}
downloadFileRangeByNameToStream(String, String, long, long){\n}
{\n}
// retrieve information on a file{\n}
getFileInfo(String){\n}
{\n}
// return the headers associated with a file{\n}
headFileById(String){\n}
{\n}
// list all of the buckets{\n}
listBuckets(){\n}
{\n}
// list file names{\n}
listFileNames(String){\n}
listFileNames(String, String, Integer){\n}
{\n}
// list file versions{\n}
listFileVersions(String){\n}
listFileVersions(String, String){\n}
listFileVersions(String, String, String, Integer){\n}
{\n}
// update the bucket type (private or public){\n}
updateBucket(String, BucketType){\n}
{\n}
// upload a file{\n}
uploadFile(String, String, File){\n}
uploadFile(String, String, File, Map<String, String>){\n}
uploadFile(String, String, File, String){\n}
uploadFile(String, String, File, String, Map<String, String>){\n}
```{\n}
{\n}